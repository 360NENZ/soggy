name: MINGW64

on:
  push:
    branches: [ "mistress" ]
  pull_request:
    branches: [ "mistress" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: "mingw64"
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install MinGW
      uses: egor-tensin/setup-mingw@v2.2.0

    #- name: vcpkg
      #run: vcpkg install protobuf
    - name: Configure mingw
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/build -D
      run: |
       pacman -S ${MINGW_PACKAGE_PREFIX}-{toolchain,cmake,protobuf,lua}
       cmake -B build -G "Unix Makefiles"

    - name: Build
      # Build your program with the given configuration
      #run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      run: cmake --build build -j8

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
